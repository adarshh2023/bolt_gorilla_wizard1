import React, { useState, useEffect } from 'react';
import { CheckCircle, Download, FileText, Share2, AlertTriangle, BarChart3, TreePine, Building, Home, Users, Car, Shield, Zap, Building2, Layers } from 'lucide-react';
import Card from '../ui/Card';
import Button from '../ui/Button';
import StepNavigation from '../wizard/StepNavigation';
import { generateProjectJSON, downloadJSON, copyToClipboard } from '../../utils/jsonExport';

const Step5ReviewFinalize = ({ 
  data, 
  onUpdate, 
  onNext,
  onPrevious,
  onSave
}) => {
  const [projectStats, setProjectStats] = useState({});
  const [validationSummary, setValidationSummary] = useState({ errors: [], warnings: [], isValid: true });
  const [expandedSections, setExpandedSections] = useState({
    overview: true,
    structure: true,
    units: false,
    validation: false
  });
  const [exportStatus, setExportStatus] = useState('');

  useEffect(() => {
    calculateProjectStats();
    validateCompleteProject();
  }, [data]);

  const calculateProjectStats = () => {
    const stats = {
      totalTowers: data.towers?.length || 0,
      totalWings: 0,
      totalFloors: 0,
      totalUnits: 0,
      totalCarpetArea: 0,
      totalBuiltUpArea: 0,
      unitBreakdown: {},
      floorTypeBreakdown: {},
      timeline: {
        duration: 0,
        startDate: data.startDate,
        endDate: data.endDate
      }
    };

    // Calculate tower and wing stats
    data.towers?.forEach(tower => {
      stats.totalWings += tower.wings?.length || 0;
      
      tower.wings?.forEach(wing => {
        Object.values(wing.floorTypes || {}).forEach(floorType => {
          if (floorType.enabled) {
            stats.totalFloors += floorType.count || 0;
            // Fixed: Use floorType name/key instead of object
            const floorTypeName = floorType.name || floorType.type || 'Unknown';
            stats.floorTypeBreakdown[floorTypeName] = (stats.floorTypeBreakdown[floorTypeName] || 0) + (floorType.count || 0);
          }
        });
      });
    });

    // Calculate unit stats
    Object.values(data.units || {}).forEach(floorUnits => {
      floorUnits.forEach(unit => {
        stats.totalUnits++;
        stats.totalCarpetArea += unit.carpetArea || 0;
        stats.totalBuiltUpArea += unit.builtUpArea || 0;
        const unitType = unit.type || 'Unknown';
        stats.unitBreakdown[unitType] = (stats.unitBreakdown[unitType] || 0) + 1;
      });
    });

    // Calculate timeline
    if (data.startDate && data.endDate) {
      const start = new Date(data.startDate);
      const end = new Date(data.endDate);
      const timeDiff = end - start;
      if (timeDiff > 0) {
        stats.timeline.duration = Math.ceil(timeDiff / (1000 * 60 * 60 * 24 * 30)); // months
      }
    }

    setProjectStats(stats);
  };

  const validateCompleteProject = () => {
    const errors = [];
    const warnings = [];

    // Validate basic project info
    if (!data.projectName?.trim()) {
      errors.push({ step: 1, field: 'projectName', message: 'Project name is required' });
    }
    if (!data.projectType?.trim()) {
      errors.push({ step: 1, field: 'projectType', message: 'Project type is required' });
    }
    if (!data.address?.trim()) {
      errors.push({ step: 1, field: 'address', message: 'Project address is required' });
    }

    // Validate towers and wings
    if (!data.towers || data.towers.length === 0) {
      errors.push({ step: 2, field: 'towers', message: 'At least one tower is required' });
    } else {
      data.towers.forEach((tower, tIndex) => {
        if (!tower.name?.trim() && !tower.customName?.trim()) {
          errors.push({ step: 2, field: `tower-${tIndex}`, message: `Tower ${tIndex + 1} name is required` });
        }
        if (!tower.wings || tower.wings.length === 0) {
          errors.push({ step: 2, field: `tower-${tIndex}-wings`, message: `Tower ${tIndex + 1} must have at least one wing` });
        } else {
          // Validate each wing has at least one enabled floor type
          tower.wings.forEach((wing, wIndex) => {
            const enabledFloorTypes = Object.values(wing.floorTypes || {}).filter(ft => ft.enabled && (ft.count || 0) > 0);
            if (enabledFloorTypes.length === 0) {
              warnings.push({ 
                step: 3, 
                field: `tower-${tIndex}-wing-${wIndex}`, 
                message: `Tower ${tIndex + 1}, Wing ${wing.name || wIndex + 1} has no enabled floor types` 
              });
            }
          });
        }
      });
    }

    // Validate units
    const totalUnits = Object.values(data.units || {}).reduce((sum, floorUnits) => sum + (floorUnits?.length || 0), 0);
    if (totalUnits === 0) {
      warnings.push({ step: 4, field: 'units', message: 'No units configured - project may be incomplete' });
    }

    // Validate dates
    if (data.startDate && data.endDate) {
      const start = new Date(data.startDate);
      const end = new Date(data.endDate);
      if (end <= start) {
        errors.push({ step: 1, field: 'dates', message: 'End date must be after start date' });
      }
    }

    setValidationSummary({
      errors,
      warnings,
      isValid: errors.length === 0
    });
  };

  const generateProjectTree = () => {
    const tree = [];
    
    data.towers?.forEach((tower, towerIndex) => {
      const towerNode = {
        id: tower.id || `tower-${towerIndex}`,
        type: 'tower',
        name: tower.name || tower.customName || `Tower ${towerIndex + 1}`,
        children: []
      };

      tower.wings?.forEach((wing, wingIndex) => {
        const wingNode = {
          id: wing.id || `wing-${wingIndex}`,
          type: 'wing',
          name: wing.name || `Wing ${wingIndex + 1}`,
          wingType: wing.type || 'Standard',
          children: []
        };

        Object.entries(wing.floorTypes || {}).forEach(([floorTypeKey, config]) => {
          if (config.enabled && (config.count || 0) > 0) {
            for (let i = 1; i <= (config.count || 0); i++) {
              const floorKey = `${tower.id || `tower-${towerIndex}`}-${wing.id || `wing-${wingIndex}`}-${floorTypeKey}-${i}`;
              const floorUnits = data.units?.[floorKey] || [];
              const floorConfig = data.floorConfigurations?.[floorKey] || {};
              
              const floorNode = {
                id: floorKey,
                type: 'floor',
                name: `${config.name || floorTypeKey} ${i}`,
                floorType: floorTypeKey,
                primaryType: floorConfig.floorType,
                usages: floorConfig.usages || [],
                unitsCount: floorUnits.length,
                children: floorUnits.map((unit, unitIndex) => ({
                  id: unit.id || `unit-${unitIndex}`,
                  type: 'unit',
                  name: unit.id || `Unit ${unitIndex + 1}`,
                  unitType: unit.type || 'Unknown',
                  templateName: unit.templateName,
                  area: unit.carpetArea || 0,
                  status: unit.status || 'Available',
                  balconies: unit.balconies || 0,
                  washrooms: (unit.attachedWashrooms || 0) + (unit.commonWashrooms || 0),
                  frontage: unit.frontage || 0,
                  monthlyRent: unit.monthlyRent || 0
                }))
              };
              
              wingNode.children.push(floorNode);
            }
          }
        });

        towerNode.children.push(wingNode);
      });

      tree.push(towerNode);
    });

    return tree;
  };

  const exportProject = async (format) => {
    setExportStatus(`Generating ${format.toUpperCase()}...`);
    
    try {
      const projectJSON = generateProjectJSON(data);
      
      switch (format) {
        case 'json':
          downloadJSON(projectJSON, `${data.projectName || 'project'}-data.json`);
          setExportStatus('JSON exported successfully!');
          break;
        case 'copy':
          await copyToClipboard(projectJSON);
          setExportStatus('Copied to clipboard!');
          break;
        default:
          setExportStatus('Export format not supported yet');
      }
      
      setTimeout(() => setExportStatus(''), 3000);
    } catch (error) {
      console.error('Export error:', error);
      setExportStatus(`Export failed: ${error.message}`);
      setTimeout(() => setExportStatus(''), 3000);
    }
  };

  const TreeNode = ({ node, level = 0 }) => {
    const [isExpanded, setIsExpanded] = useState(level < 2);
    
    const getNodeIcon = () => {
      switch (node.type) {
        case 'tower': return <Building className="w-4 h-4 text-blue-600" />;
        case 'wing': return <Building2 className="w-4 h-4 text-green-600" />;
        case 'floor': return <Layers className="w-4 h-4 text-purple-600" />;
        case 'unit': return <Home className="w-4 h-4 text-orange-600" />;
        default: return null;
      }
    };

    const getNodeColor = () => {
      switch (node.type) {
        case 'tower': return 'bg-blue-50 border-blue-200 text-blue-800';
        case 'wing': return 'bg-green-50 border-green-200 text-green-800';
        case 'floor': return 'bg-purple-50 border-purple-200 text-purple-800';
        case 'unit': return `bg-orange-50 border-orange-200 text-orange-800 ${node.status === 'Sold' ? 'opacity-60' : ''}`;
        default: return 'bg-gray-50 border-gray-200 text-gray-800';
      }
    };

    const getNodeDetails = () => {
      switch (node.type) {
        case 'wing':
          return `${node.wingType} • ${node.children?.length || 0} floors`;
        case 'floor':
          const details = [];
          if (node.primaryType) details.push(node.primaryType);
          if (node.usages?.length > 0) details.push(`+${node.usages.length} usage types`);
          details.push(`${node.unitsCount} units`);
          return details.join(' • ');
        case 'unit':
          const unitDetails = [];
          unitDetails.push(node.unitType);
          if (node.templateName) unitDetails.push(`Template: ${node.templateName}`);
          if (node.area > 0) unitDetails.push(`${node.area} sq ft`);
          if (node.balconies > 0) unitDetails.push(`${node.balconies} balconies`);
          if (node.washrooms > 0) unitDetails.push(`${node.washrooms} washrooms`);
          if (node.frontage > 0) unitDetails.push(`${node.frontage}ft frontage`);
          if (node.monthlyRent > 0) unitDetails.push(`₹${node.monthlyRent.toLocaleString()}/mo`);
          if (node.status && node.status !== 'Available') unitDetails.push(node.status);
          return unitDetails.join(' • ');
        default:
          return '';
      }
    };

    // Fixed: Use padding instead of dynamic margin class
    const paddingClass = `pl-${Math.min(level * 4, 16)}`;

    return (
      <div className={paddingClass}>
        <div className={`
          flex items-center p-3 rounded-lg border mb-2 transition-all duration-200
          ${getNodeColor()}
          hover:shadow-md cursor-pointer
        `}>
          <div className="flex items-center space-x-3 flex-1">
            {node.children && node.children.length > 0 && (
              <button
                onClick={() => setIsExpanded(!isExpanded)}
                className="text-gray-500 hover:text-gray-700 w-6 h-6 flex items-center justify-center"
                aria-label={isExpanded ? 'Collapse' : 'Expand'}
              >
                {isExpanded ? '▼' : '▶'}
              </button>
            )}
            {getNodeIcon()}
            <div className="flex-1">
              <div className="font-medium">{node.name}</div>
              {getNodeDetails() && (
                <div className="text-sm opacity-75">{getNodeDetails()}</div>
              )}
            </div>
          </div>
        </div>
        
        {isExpanded && node.children && node.children.length > 0 && (
          <div className="ml-4 animate-slide-up">
            {node.children.map(child => (
              <TreeNode key={child.id} node={child} level={level + 1} />
            ))}
          </div>
        )}
      </div>
    );
  };

  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleFinalize = () => {
    if (validationSummary.isValid) {
      onUpdate({ 
        finalizedAt: new Date().toISOString(),
        projectStats,
        validationSummary 
      });
      onNext();
    }
  };

  const handleSave = () => {
    if (onSave) {
      onSave();
    }
  };

  const projectTree = generateProjectTree();

  return (
    <div className="space-y-8 animate-slide-up">
      <Card className="overflow-hidden">
        <Card.Header>
          <div className="flex items-center justify-between">
            <Card.Title icon={CheckCircle} gradient>Review & Finalize</Card.Title>
            <div className="flex space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => exportProject('json')}
                icon={Download}
              >
                Export JSON
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => exportProject('copy')}
                icon={Share2}
              >
                Copy Data
              </Button>
            </div>
          </div>
          <Card.Subtitle>
            Review your complete project configuration, validate all settings, and finalize the project creation.
          </Card.Subtitle>
          {exportStatus && (
            <div className="mt-2 p-2 bg-green-100 text-green-800 rounded text-sm">
              {exportStatus}
            </div>
          )}
        </Card.Header>

        <Card.Content>
          {/* Validation Summary */}
          <div 
            className="mb-8 p-6 bg-gradient-to-r from-red-50 to-orange-50 rounded-xl border border-red-200 cursor-pointer"
            onClick={() => toggleSection('validation')}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <AlertTriangle className="w-6 h-6 text-red-600" />
                <h4 className="text-lg font-bold text-red-800">Project Validation</h4>
              </div>
              <div className="text-sm text-red-600">
                {expandedSections.validation ? '▼ Hide' : '▶ Show'} • {validationSummary.errors.length} errors, {validationSummary.warnings.length} warnings
              </div>
            </div>
            
            {expandedSections.validation && (
              <div className="mt-4 space-y-4 animate-slide-up">
                {validationSummary.errors.length > 0 && (
                  <div className="p-4 bg-white rounded-lg border border-red-200">
                    <h5 className="font-semibold text-red-800 mb-3">❌ Errors (Must Fix)</h5>
                    <ul className="space-y-2">
                      {validationSummary.errors.map((error, index) => (
                        <li key={index} className="text-sm text-red-700 flex items-start">
                          <span className="w-2 h-2 bg-red-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                          <span><strong>Step {error.step}:</strong> {error.message}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {validationSummary.warnings.length > 0 && (
                  <div className="p-4 bg-white rounded-lg border border-yellow-200">
                    <h5 className="font-semibold text-yellow-800 mb-3">⚠️ Warnings (Recommended)</h5>
                    <ul className="space-y-2">
                      {validationSummary.warnings.map((warning, index) => (
                        <li key={index} className="text-sm text-yellow-700 flex items-start">
                          <span className="w-2 h-2 bg-yellow-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                          <span><strong>Step {warning.step}:</strong> {warning.message}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {validationSummary.errors.length === 0 && validationSummary.warnings.length === 0 && (
                  <div className="p-4 bg-white rounded-lg border border-green-200">
                    <div className="flex items-center space-x-3 text-green-800">
                      <CheckCircle className="w-5 h-5" />
                      <span className="font-semibold">All validations passed! Project is ready to finalize.</span>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Project Overview */}
          <div 
            className="mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 cursor-pointer"
            onClick={() => toggleSection('overview')}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                <BarChart3 className="w-6 h-6 text-blue-600" />
                <h4 className="text-lg font-bold text-blue-800">Project Statistics</h4>
              </div>
              <div className="text-sm text-blue-600">
                {expandedSections.overview ? '▼ Hide' : '▶ Show'}
              </div>
            </div>
            
            {expandedSections.overview && (
              <div className="animate-slide-up">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                  <div className="text-center p-4 bg-white rounded-lg border border-blue-200">
                    <div className="text-3xl font-bold text-blue-600">{projectStats.totalTowers}</div>
                    <div className="text-sm text-gray-600">Towers</div>
                  </div>
                  <div className="text-center p-4 bg-white rounded-lg border border-blue-200">
                    <div className="text-3xl font-bold text-green-600">{projectStats.totalWings}</div>
                    <div className="text-sm text-gray-600">Wings</div>
                  </div>
                  <div className="text-center p-4 bg-white rounded-lg border border-blue-200">
                    <div className="text-3xl font-bold text-purple-600">{projectStats.totalFloors}</div>
                    <div className="text-sm text-gray-600">Floors</div>
                  </div>
                  <div className="text-center p-4 bg-white rounded-lg border border-blue-200">
                    <div className="text-3xl font-bold text-orange-600">{projectStats.totalUnits}</div>
                    <div className="text-sm text-gray-600">Units</div>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="p-4 bg-white rounded-lg border border-blue-200">
                    <h5 className="font-semibold text-gray-800 mb-3">📐 Area Summary</h5>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>Total Carpet Area:</span>
                        <span className="font-medium">{projectStats.totalCarpetArea?.toLocaleString()} sq ft</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Total Built-up Area:</span>
                        <span className="font-medium">{projectStats.totalBuiltUpArea?.toLocaleString()} sq ft</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Average Unit Size:</span>
                        <span className="font-medium">
                          {projectStats.totalUnits > 0 ? Math.round(projectStats.totalCarpetArea / projectStats.totalUnits) : 0} sq ft
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-white rounded-lg border border-blue-200">
                    <h5 className="font-semibold text-gray-800 mb-3">🏠 Unit Breakdown</h5>
                    <div className="space-y-2 text-sm">
                      {Object.entries(projectStats.unitBreakdown).map(([type, count]) => (
                        <div key={type} className="flex justify-between">
                          <span>{type}:</span>
                          <span className="font-medium">{count} units</span>
                        </div>
                      ))}
                      {Object.keys(projectStats.unitBreakdown).length === 0 && (
                        <div className="text-gray-500 italic">No units configured yet</div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Project Structure Tree */}
          <div 
            className="mb-8 p-6 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-200 cursor-pointer"
            onClick={() => toggleSection('structure')}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                <TreePine className="w-6 h-6 text-green-600" />
                <h4 className="text-lg font-bold text-green-800">Project Structure Tree</h4>
              </div>
              <div className="text-sm text-green-600">
                {expandedSections.structure ? '▼ Hide' : '▶ Show'} Complete Hierarchy
              </div>
            </div>
            
            {expandedSections.structure && (
              <div className="animate-slide-up">
                <div className="bg-white p-6 rounded-lg border border-green-200 max-h-96 overflow-y-auto">
                  <div className="space-y-2">
                    {projectTree.length > 0 ? (
                      projectTree.map(node => (
                        <TreeNode key={node.id} node={node} />
                      ))
                    ) : (
                      <div className="text-gray-500 italic text-center py-8">
                        No project structure to display. Configure towers and wings first.
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Project Summary Card */}
          <div className="p-8 bg-gradient-to-r from-gray-900 to-blue-900 text-white rounded-2xl">
            <h4 className="text-2xl font-bold mb-6 text-center">🎯 Complete Project Summary</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              <div className="text-center">
                <h5 className="font-bold text-blue-300 mb-4">📋 Project Details</h5>
                <div className="space-y-2 text-sm">
                  <div><strong>Name:</strong> {data.projectName || 'Not specified'}</div>
                  <div><strong>Code:</strong> {data.projectCode || 'Not specified'}</div>
                  <div><strong>Type:</strong> {data.projectType || 'Not specified'}</div>
                  <div><strong>Location:</strong> {data.city || 'N/A'}, {data.state || 'N/A'}</div>
                  <div><strong>Manager:</strong> {data.manager || 'Not assigned'}</div>
                  <div><strong>Duration:</strong> {projectStats.timeline.duration || 0} months</div>
                </div>
              </div>

              <div className="text-center">
                <h5 className="font-bold text-green-300 mb-4">🏗️ Structure</h5>
                <div className="space-y-2 text-sm">
                  <div><strong>Towers:</strong> {projectStats.totalTowers}</div>
                  <div><strong>Wings:</strong> {projectStats.totalWings}</div>
                  <div><strong>Floors:</strong> {projectStats.totalFloors}</div>
                  <div><strong>Units:</strong> {projectStats.totalUnits}</div>
                  <div><strong>Total Area:</strong> {projectStats.totalCarpetArea?.toLocaleString() || 0} sq ft</div>
                </div>
              </div>

              <div className="text-center">
                <h5 className="font-bold text-purple-300 mb-4">🏷️ Configuration</h5>
                <div className="space-y-2 text-sm">
                  <div><strong>Numbering:</strong> {data.flatNumberingType?.replace('-', ' ') || 'Default'}</div>
                  <div><strong>Custom Templates:</strong> {Object.keys(data.customTemplates || {}).length}</div>
                  <div><strong>Units with Templates:</strong> {
                    Object.values(data.units || {}).reduce((sum, floorUnits) => 
                      sum + (floorUnits?.filter(unit => unit.templateName)?.length || 0), 0
                    )
                  }</div>
                  <div><strong>Project Scale:</strong> {data.phaseType || 'Single'} Phase</div>
                </div>
              </div>
            </div>

            {/* Key Highlights */}
            <div className="mt-8 pt-6 border-t border-gray-700">
              <h5 className="font-bold text-center mb-4 text-yellow-300">✨ Project Highlights</h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <ul className="space-y-2">
                  <li>🏗️ {projectStats.totalTowers} Tower{projectStats.totalTowers !== 1 ? 's' : ''} with {projectStats.totalWings} Wing{projectStats.totalWings !== 1 ? 's' : ''}</li>
                  <li>🏠 {projectStats.totalUnits} Total Units across {projectStats.totalFloors} Floors</li>
                  <li>🏷️ {data.flatNumberingType?.replace('-', ' ') || 'Default'} Numbering System</li>
                  <li>📐 {projectStats.totalCarpetArea?.toLocaleString() || 0} sq ft Total Area</li>
                </ul>
                <ul className="space-y-2">
                  {Object.entries(projectStats.unitBreakdown).slice(0, 4).map(([type, count]) => (
                    <li key={type}>🏘️ {count} {type} Unit{count !== 1 ? 's' : ''}</li>
                  ))}
                  {Object.keys(projectStats.unitBreakdown).length === 0 && (
                    <li className="text-gray-400 italic">No unit types configured</li>
                  )}
                </ul>
              </div>
            </div>
          </div>

          {/* Final Actions */}
          <div className="p-6 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-xl border border-yellow-200">
            <h4 className="font-bold text-yellow-800 mb-4">📤 Export & Share Options</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Button
                variant="outline"
                onClick={() => exportProject('json')}
                icon={FileText}
                className="w-full"
              >
                Download JSON
              </Button>
              <Button
                variant="outline"
                onClick={() => exportProject('copy')}
                icon={Share2}
                className="w-full"
              >
                Copy to Clipboard
              </Button>
              <Button
                variant="outline"
                onClick={() => console.log('PDF export coming soon')}
                icon={Download}
                className="w-full"
                disabled
              >
                Generate PDF (Soon)
              </Button>
            </div>
          </div>
        </Card.Content>

        <StepNavigation
          onPrevious={onPrevious}
          onNext={handleFinalize}
          onSave={handleSave}
          isValid={validationSummary.isValid}
          isLastStep={true}
          nextLabel="🎉 Finalize Project"
          previousLabel="Back: Unit Configuration"
        />
      </Card>
    </div>
  );
};

export default Step5ReviewFinalize;